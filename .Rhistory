install.packages(tipyverse)
install.packages("tipyverse")
library(tipyverse)
install.packages("tipyverse")
install.packages("tipyver)
install.packages("tipyverse)
notas <- c(15,16,18,19,15)|>
mean(notas)
notas <- c(15,16,18,19,15)|>
mean(notas)
|
notas <- c(15,16,18,19,15)|>
mean(notas)
notas <- c(15,16,18,19,15)|>
mean(notas)
notas <- c(15,16,18,19,15)|>
mean(notas)
notas <- c(15,16,18,19,15)|>mean()
()
notas <- c(15,16,18,19,15)|> mean(notas)
notas <- c(15,16,18,19,15)|> mean()
install.packages(tipyverse)
yverse")
notas <- c(15,16,18,19,15)|> mean()
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
area <- function(r)(
)
area <- function(r)[
area <- function(r)
area <- function(r) [
area <- function(r)[3.14*r*r]
area <- function(r){3.14*r*r}
area(20)
area(7)
area <- function(r){
# Comprobar si el valor es numérico
if (!is.numeric(r) || is.na(r)) {
return("Por favor, inserte un número válido.")
} else {
return(pi * r * r)
}
return("Por favor, inserte un número válido.")
return(pi * r * r)
area(a)
area(10)
area <- function(r){
# Comprobar si el valor es numérico
if (!is.numeric(r) || is.na(r)) {
return("Por favor, inserte un número válido.")
} else {
return(pi * r * r)
}
area("a")
calcular_IMC <- function(peso, altura) {
# Comprobar si el peso y la altura son numéricos
if (!is.numeric(peso) || is.na(peso)) {
return("Por favor, inserte un peso válido (número).")
}
if (!is.numeric(altura) || is.na(altura)) {
return("Por favor, inserte una altura válida (número).")
}
# Comprobar si el peso y la altura son mayores que cero
if (peso <= 0) {
return("El peso debe ser mayor que cero.")
}
if (altura <= 0) {
return("La altura debe ser mayor que cero.")
}
# Calcular el IMC
imc <- peso / (altura^2)
# Retornar el resultado con dos decimales
return(round(imc, 2))
}
resultado <- calcular_IMC(75, 1.75)  # Peso en kg, altura en metros
print(resultado)
calcular_IMC <- function(peso, altura) {
# Comprobar si el peso y la altura son numéricos
if (!is.numeric(peso) || is.na(peso)) {
return("Por favor, inserte un peso válido (número).")
}
if (!is.numeric(altura) || is.na(altura)) {
return("Por favor, inserte una altura válida (número).")
}
# Comprobar si el peso y la altura son mayores que cero
if (peso <= 0) {
return("El peso debe ser mayor que cero.")
}
if (altura <= 0) {
return("La altura debe ser mayor que cero.")
}
# Calcular el IMC
imc <- peso / (altura^2)
imc <- round(imc, 2)
# Clasificación del IMC
if (imc < 18.5) {
clasificacion <- "Bajo peso"
} else if (imc >= 18.5 && imc < 24.9) {
clasificacion <- "Peso normal"
} else if (imc >= 25 && imc < 29.9) {
clasificacion <- "Sobrepeso"
} else {
clasificacion <- "Obesidad"
}
# Devolver el IMC y la clasificación
return(paste("IMC:", imc, "-", clasificacion))
}
print(resultado)
resultado <- calcular_IMC(70, 1.75)  # Peso en kg, altura en metros
resultado
source("~/Programación_análisis de datos/Funciones.R")
# Cargar librerías
library(googlesheets4)
library(tidyverse)
# URL de la hoja de Google Sheets
url <- "https://docs.google.com/spreadsheets/d/15r7ZwcZZHbEgltlF6gSFvCTFA-CFzVBWwg3mFlRyKPs/edit#gid=172957346"
# Leer los datos de la pestaña "fb"
fb <- range_read(url, sheet = "fb")
```{r}
# Modelo lineal
modelo <- lm(formula = lfa ~ block + geno + riego * geno, data = fb)
# Análisis de varianza del modelo
anova(modelo)
# Cargar librerías
library(ggplot2)
# Crear un diagrama de cajas
ggplot(data = fb, aes(x = geno, y = lfa)) +
geom_boxplot() +
labs(title = "Diagrama de Cajas de lfa por geno",
x = "Genotipo (geno)",
y = "Valor de lfa") +
theme_minimal()
# Crear un diagrama de cajas
ggplot(data = fb, aes(x = geno, y = lfa, fill = riego)) +
geom_boxplot() +
labs(title = "Diagrama de Cajas de lfa por geno y riego",
x = "Genotipo (geno)",
y = "Valor de lfa") +
theme_minimal()
library(googlesheets4)
library(tidyverse)
url <- "https://docs.google.com/spreadsheets/d/15r7ZwcZZHbEgltlF6gSFvCTFA-CFzVBWwg3mFlRyKPs/edit#gid=172957346"
fb <- range_read(url, sheet = "fb")
modelo <- lm(formula = tubdw  ~ block + geno + riego * geno, data = fb)
anova(modelo)
library(ggplot2)
# Crear un diagrama de cajas
ggplot(data = fb, aes(x = geno, y = wue, fill = riego)) +
geom_boxplot() +
labs(title = "Diagrama de Cajas de wue por geno y riego",
x = "Genotipo (geno)",
y = "Valor de wue") +
theme_minimal()
library(agricolae)
library(dplyr)
library(tidyr)
# Análisis de varianza del modelo
anova(modelo)
# Realizar la prueba de Tukey
tukey_result <- HSD.test(modelo, tr = c("geno", "riego"), group = TRUE)
# Mostrar resultados
print(tukey_result)
# Cambiar el título del gráfico de Tukey a español
plot(tukey_result, main = "Grupos y Rangos de Tratamientos")
# Manipular los resultados para separar 'geno' y 'riego'
grupos <- tukey_result$groups %>%
rownames_to_column("tratamientos") %>%
separate(tratamientos, into = c("geno", "riego"), sep = ":")
# Mostrar la estructura del dataframe 'grupos'
str(grupos)
# Cargar las librerías necesarias
source('https://inkaverse.com/setup.r')
library(emmeans)
library(multcomp)
library(multcompView)
# Ajustar el modelo cambiando a wue
modelo <- lme4::lmer(wue ~ riego * geno + (1 | bloque), data = fb)
# Análisis de varianza del modelo
anova(modelo)
# Comparaciones de medias con emmeans
cm1 <- emmeans(modelo, ~ geno | riego) %>%
cld(Letters = letters, reversed = T)
cm1
cm2 <- emmeans(modelo, ~ riego | geno) %>%
cld(Letters = letters, reversed = T)
cm2
cm3 <- emmeans(modelo, ~ riego * geno) %>%
cld(Letters = letters, reversed = T)
cm3
### Gráfica
library(ggplot2)
dtcm <- as.data.frame(cm1) %>%
rename(sig = ".group")
# Crear el gráfico de barras para wue
ggplot(dtcm, aes(x = geno, y = emmean, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_text(aes(label = sig, y = emmean),
position = position_dodge(width = 0.9),
vjust = 0) +
labs(x = "Genotipo", y = "Eficiencia en el Uso del Agua (wue)", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Eficiencia en el Uso del Agua (wue) por Genotipo y Riego")
fb <- as.data.frame(fb)
# Mostrar la estructura de los datos
str(fb)
fb %>%
select_if(is.numeric) %>%
dplyr::select(-c("block")) %>%
pairs.panels(
hist.col = "red",
pch = 21,
stars = TRUE,
scale = FALSE,
lm = TRUE
)
library(FactoMineR)
library(dplyr)
library(cowplot)
# Selecciona solo las variables necesarias y calcula el promedio
mv <- fb %>%
group_by(riego, geno) %>%
summarise(across(c(tubdw, wue), ~ mean(., na.rm = TRUE))) %>%
PCA(scale.unit = TRUE, quali.sup = c(1, 2), graph = FALSE)  # Adaptamos quali.sup a las posiciones de 'riego' y 'geno'
# Graficar el análisis de componentes principales
p1 <- plot(mv, choix = "ind", habillage = "ind", label = "ind")
p2 <- plot(mv, choix = "var")
# Combinar las gráficas en una sola fila
plot_grid(p1, p2, nrow = 1)
library(googlesheets4)
library(tidyverse)
url <- "https://docs.google.com/spreadsheets/d/15r7ZwcZZHbEgltlF6gSFvCTFA-CFzVBWwg3mFlRyKPs/edit#gid=172957346"
fb <- range_read(url, sheet = "fb")
modelo <- lm(formula = tubdw  ~ block + geno + riego * geno, data = fb)
anova(modelo)
library(ggplot2)
# Crear un diagrama de cajas
ggplot(data = fb, aes(x = geno, y = wue, fill = riego)) +
geom_boxplot() +
labs(title = "Diagrama de Cajas de wue por geno y riego",
x = "Genotipo (geno)",
y = "Valor de wue") +
theme_minimal()
modelo <- lm(formula = rwc_84  ~ block + geno + riego * geno, data = fb)
anova(modelo)
modelo <- lm(formula = rwc_84  ~ block + geno + riego * geno, data = fb)
anova(modelo)
library(ggplot2)
# Crear un diagrama de cajas
ggplot(data = fb, aes(x = geno, y = rwc_84, fill = riego)) +
geom_boxplot() +
labs(title = "Diagrama de Cajas de rwc_84 por geno y riego",
x = "Genotipo (geno)",
y = "Valor de rwc_84") +
theme_minimal()
library(agricolae)
library(dplyr)
library(tidyr)
# Análisis de varianza del modelo
anova(modelo)
# Realizar la prueba de Tukey
tukey_result <- HSD.test(modelo, tr = c("geno", "riego"), group = TRUE)
# Mostrar resultados
print(tukey_result)
# Cambiar el título del gráfico de Tukey a español
plot(tukey_result, main = "Grupos y Rangos de Tratamientos")
# Manipular los resultados para separar 'geno' y 'riego'
grupos <- tukey_result$groups %>%
rownames_to_column("tratamientos") %>%
separate(tratamientos, into = c("geno", "riego"), sep = ":")
# Mostrar la estructura del dataframe 'grupos'
str(grupos)
# Cargar las librerías necesarias
source('https://inkaverse.com/setup.r')
library(emmeans)
library(multcomp)
library(multcompView)
# Ajustar el modelo cambiando a wue
modelo <- lme4::lmer(wue ~ riego * geno + (1 | bloque), data = fb)
# Análisis de varianza del modelo
anova(modelo)
# Comparaciones de medias con emmeans
cm1 <- emmeans(modelo, ~ geno | riego) %>%
cld(Letters = letters, reversed = T)
cm1
cm2 <- emmeans(modelo, ~ riego | geno) %>%
cld(Letters = letters, reversed = T)
cm2
cm3 <- emmeans(modelo, ~ riego * geno) %>%
cld(Letters = letters, reversed = T)
cm3
### Gráfica
library(ggplot2)
dtcm <- as.data.frame(cm1) %>%
rename(sig = ".group")
# Crear el gráfico de barras para wue
ggplot(dtcm, aes(x = geno, y = emmean, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_text(aes(label = sig, y = emmean),
position = position_dodge(width = 0.9),
vjust = 0) +
labs(x = "Genotipo", y = "Eficiencia en el Uso del Agua (wue)", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Eficiencia en el Uso del Agua (wue) por Genotipo y Riego")
library(FactoMineR)
library(dplyr)
library(cowplot)
# Selecciona solo las variables necesarias y calcula el promedio
mv <- fb %>%
group_by(riego, geno) %>%
summarise(across(c(rwc_84, wue), ~ mean(., na.rm = TRUE))) %>%
PCA(scale.unit = TRUE, quali.sup = c(1, 2), graph = FALSE)  # Adaptamos quali.sup a las posiciones de 'riego' y 'geno'
# Graficar el análisis de componentes principales
p1 <- plot(mv, choix = "ind", habillage = "ind", label = "ind")
p2 <- plot(mv, choix = "var")
# Combinar las gráficas en una sola fila
plot_grid(p1, p2, nrow = 1)
library(googlesheets4)
library(tidyverse)
url <- "https://docs.google.com/spreadsheets/d/15r7ZwcZZHbEgltlF6gSFvCTFA-CFzVBWwg3mFlRyKPs/edit#gid=172957346"
fb <- range_read(url, sheet = "fb")
modelo <- lm(formula = rwc_84  ~ block + geno + riego * geno, data = fb)
anova(modelo)
library(ggplot2)
# Crear un diagrama de cajas
ggplot(data = fb, aes(x = geno, y = rwc_84, fill = riego)) +
geom_boxplot() +
labs(title = "Diagrama de Cajas de rwc_84 por geno y riego",
x = "Genotipo (geno)",
y = "Valor de rwc_84") +
theme_minimal()
library(agricolae)
library(dplyr)
library(tidyr)
# Análisis de varianza del modelo
anova(modelo)
# Realizar la prueba de Tukey
tukey_result <- HSD.test(modelo, tr = c("geno", "riego"), group = TRUE)
# Mostrar resultados
print(tukey_result)
# Cambiar el título del gráfico de Tukey a español
plot(tukey_result, main = "Grupos y Rangos de Tratamientos")
# Manipular los resultados para separar 'geno' y 'riego'
grupos <- tukey_result$groups %>%
rownames_to_column("tratamientos") %>%
separate(tratamientos, into = c("geno", "riego"), sep = ":")
# Mostrar la estructura del dataframe 'grupos'
str(grupos)
