install.packages(tipyverse)
install.packages("tipyverse")
library(tipyverse)
install.packages("tipyverse")
install.packages("tipyver)
install.packages("tipyverse)
notas <- c(15,16,18,19,15)|>
mean(notas)
notas <- c(15,16,18,19,15)|>
mean(notas)
|
notas <- c(15,16,18,19,15)|>
mean(notas)
notas <- c(15,16,18,19,15)|>
mean(notas)
notas <- c(15,16,18,19,15)|>
mean(notas)
notas <- c(15,16,18,19,15)|>mean()
()
notas <- c(15,16,18,19,15)|> mean(notas)
notas <- c(15,16,18,19,15)|> mean()
install.packages(tipyverse)
yverse")
notas <- c(15,16,18,19,15)|> mean()
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
area <- function(r)(
)
area <- function(r)[
area <- function(r)
area <- function(r) [
area <- function(r)[3.14*r*r]
area <- function(r){3.14*r*r}
area(20)
area(7)
area <- function(r){
# Comprobar si el valor es numérico
if (!is.numeric(r) || is.na(r)) {
return("Por favor, inserte un número válido.")
} else {
return(pi * r * r)
}
return("Por favor, inserte un número válido.")
return(pi * r * r)
area(a)
area(10)
area <- function(r){
# Comprobar si el valor es numérico
if (!is.numeric(r) || is.na(r)) {
return("Por favor, inserte un número válido.")
} else {
return(pi * r * r)
}
area("a")
calcular_IMC <- function(peso, altura) {
# Comprobar si el peso y la altura son numéricos
if (!is.numeric(peso) || is.na(peso)) {
return("Por favor, inserte un peso válido (número).")
}
if (!is.numeric(altura) || is.na(altura)) {
return("Por favor, inserte una altura válida (número).")
}
# Comprobar si el peso y la altura son mayores que cero
if (peso <= 0) {
return("El peso debe ser mayor que cero.")
}
if (altura <= 0) {
return("La altura debe ser mayor que cero.")
}
# Calcular el IMC
imc <- peso / (altura^2)
# Retornar el resultado con dos decimales
return(round(imc, 2))
}
resultado <- calcular_IMC(75, 1.75)  # Peso en kg, altura en metros
print(resultado)
calcular_IMC <- function(peso, altura) {
# Comprobar si el peso y la altura son numéricos
if (!is.numeric(peso) || is.na(peso)) {
return("Por favor, inserte un peso válido (número).")
}
if (!is.numeric(altura) || is.na(altura)) {
return("Por favor, inserte una altura válida (número).")
}
# Comprobar si el peso y la altura son mayores que cero
if (peso <= 0) {
return("El peso debe ser mayor que cero.")
}
if (altura <= 0) {
return("La altura debe ser mayor que cero.")
}
# Calcular el IMC
imc <- peso / (altura^2)
imc <- round(imc, 2)
# Clasificación del IMC
if (imc < 18.5) {
clasificacion <- "Bajo peso"
} else if (imc >= 18.5 && imc < 24.9) {
clasificacion <- "Peso normal"
} else if (imc >= 25 && imc < 29.9) {
clasificacion <- "Sobrepeso"
} else {
clasificacion <- "Obesidad"
}
# Devolver el IMC y la clasificación
return(paste("IMC:", imc, "-", clasificacion))
}
print(resultado)
resultado <- calcular_IMC(70, 1.75)  # Peso en kg, altura en metros
resultado
source("~/Programación_análisis de datos/Funciones.R")
# Cargar librerías
library(googlesheets4)
library(tidyverse)
# URL de la hoja de Google Sheets
url <- "https://docs.google.com/spreadsheets/d/15r7ZwcZZHbEgltlF6gSFvCTFA-CFzVBWwg3mFlRyKPs/edit#gid=172957346"
# Leer los datos de la pestaña "fb"
fb <- range_read(url, sheet = "fb")
```{r}
# Modelo lineal
modelo <- lm(formula = lfa ~ block + geno + riego * geno, data = fb)
# Análisis de varianza del modelo
anova(modelo)
# Cargar librerías
library(ggplot2)
# Crear un diagrama de cajas
ggplot(data = fb, aes(x = geno, y = lfa)) +
geom_boxplot() +
labs(title = "Diagrama de Cajas de lfa por geno",
x = "Genotipo (geno)",
y = "Valor de lfa") +
theme_minimal()
# Crear un diagrama de cajas
ggplot(data = fb, aes(x = geno, y = lfa, fill = riego)) +
geom_boxplot() +
labs(title = "Diagrama de Cajas de lfa por geno y riego",
x = "Genotipo (geno)",
y = "Valor de lfa") +
theme_minimal()
